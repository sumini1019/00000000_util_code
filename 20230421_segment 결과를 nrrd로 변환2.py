import os.path
import cv2
import SimpleITK as sitk
import numpy as np
from scipy.ndimage import zoom
from scipy.sparse import coo_matrix

# Binary Class로 pred 된, seg_array의 모든 픽셀값을 8로 바꿔주기 위함
# (8 : Subtype 포함된 Annotation에서 단순 Hemorrhage)
def convert_seg_array(seg_array):
    # 배열에 포함된 값이 0과 1인지 확인
    unique_values = np.unique(seg_array)
    if set(unique_values) != {0, 1} and set(unique_values) != {0}:
        raise ValueError("Array should only contain 0 or 1.")

    # 배열에서 1값을 8로 교체
    seg_array[seg_array == 1] = 8

    return seg_array

def create_nrrd_from_array(path_nifti, seg_array, path_output=''):
    # nifti 파일 읽기
    nifti_image = sitk.ReadImage(path_nifti)
    # 원본 nifti의 array (size ratio 계산 목적)
    nifti_array = sitk.GetArrayFromImage(nifti_image)
    # 원본 sitk_image와 원본 NIfTI 이미지의 크기 사이의 비율을 계산 (z축은 변경하지 않음)
    size_ratio = [float(nifti_array.shape[i]) / float(seg_array.shape[i]) for i in range(3)]
    # seg_array 크기를 조정
    seg_array_resized = zoom(seg_array, size_ratio, order=0)

    # 크기가 조정된 seg_array를 사용하여 새로운 SimpleITK 이미지 생성
    sitk_image = sitk.GetImageFromArray(seg_array_resized)
    sitk_image.SetSpacing(nifti_image.GetSpacing())
    sitk_image.SetOrigin(nifti_image.GetOrigin())
    sitk_image.SetDirection(nifti_image.GetDirection())
    # metadata 설정
    colors = [
        "1 0.196078 0.196078",
        "0.101961 1 0",
        "1 0.972549 0.219608",
        "0.529412 0.882353 1",
        "1 0.396078 0.678431",
        "0.960784 0.180392 1",
        "0 0.34902 1",
        "0.5 0.1 0.9"
    ]
    segment_names = [
        "EDH",
        "ICH",
        "IVH",
        "SAH",
        "SDH",
        "SDH(Chronic)",
        "HemorrhagicContusion",
        "Hemorrhage(Require_Categorization)"
    ]
    for i in range(8):
        sitk_image.SetMetaData(f"Segment{i}_Color", colors[i])
        sitk_image.SetMetaData(f"Segment{i}_ColorAutoGenerated", "0")
        # sitk_image.SetMetaData(f"Segment{i}_Extent", f"0 {size[0]-1} 0 {size[1]-1} 0 {size[2]-1}")
        sitk_image.SetMetaData(f"Segment{i}_ID", f"Segment_{i + 1}")
        sitk_image.SetMetaData(f"Segment{i}_LabelValue", str(i + 1))
        sitk_image.SetMetaData(f"Segment{i}_Layer", "0")
        sitk_image.SetMetaData(f"Segment{i}_Name", segment_names[i])
        sitk_image.SetMetaData(f"Segment{i}_NameAutoGenerated", "0")
        sitk_image.SetMetaData(f"Segment{i}_Tags",
                               f"TerminologyEntry:Segmentation category and type - Heuron_cHSSCT^85756007^Tissue^^^^~~^^^^|")



    fn_output = os.path.join(path_output, os.path.basename(path_nifti).split('.nii')[0] + '.nrrd')
    # nrrd 파일로 저장
    sitk.WriteImage(sitk_image, fn_output, useCompression=True)

# # 1. Nifti 와 동일한 크기의 input
# seg_array = np.zeros((32, 512, 512), dtype=np.uint8)
# for z in range(10, 22):
#     for y in range(20, 492):
#         for x in range(20, 492):
#             if (x - 256) ** 2 + (y - 256) ** 2 + (z - 16) ** 2 <= 10000:
#                 seg_array[z, y, x] = (x + y + z) % 7 + 1
#
# seg_array = convert_seg_array(seg_array)
# create_nrrd_from_array(path_nifti='sample_nifti.nii.gz', seg_array=seg_array)

# # 2. Nifti와 다른 사이즈의 input
# image_array = np.zeros((16, 256, 256), dtype=np.uint8)
# for z in range(5, 11):
#     for y in range(20, 236):
#         for x in range(20, 236):
#             if (x - 128) ** 2 + (y - 128) ** 2 + ((z - 6.5)/2) ** 2 <= 2500:
#                 image_array[z-5, y-20, x-20] = (x + y + z) % 7 + 1
# seg_array = convert_seg_array(seg_array)
# create_nrrd_from_array(path_nifti='sample_nifti.nii.gz', seg_array=seg_array)

# 3. 실제 hemorrhage inference 결과인, 3d stack 매트릭스 기반으로 입혀보기
# # 길병원 임상데이터
# path_dir_nifti = r'Z:\Sumin_Jung\00000000_DATA\1_cHS\20210119_cHS_Gil_Data\Original\Hemo_n38\nifti'
# path_dir_npy = r'C:\Users\user\Downloads\20230421_길병원Hemo_predStack'
# RSNA Annotation 없는 데이터
path_dir_nifti = r'D:\00000000_Data\20230403_HeuronAnnotation\1_nifti_nrrd\image_Hemo_nifti (ALL)'
path_dir_npy = r'Z:\Sumin_Jung\00000000_DATA\1_cHS\20210107_cHS_RSNA_Data\20230426_ICH_PreAnnotation\1_seg_numpy'
path_dir_output = r'Z:\Sumin_Jung\00000000_DATA\1_cHS\20210107_cHS_RSNA_Data\20230426_ICH_PreAnnotation\3_seg_nrrd(compressed)'

list_npy = os.listdir(path_dir_npy)
list_npy.sort()

list_npy = list_npy

for idx, item in enumerate(list_npy):
    fn_item, ext = os.path.splitext(item)

    print(f'ID : {fn_item} / cnt : {idx}')

    path_nifti = os.path.join(path_dir_nifti, f'{fn_item}.nii.gz')
    seg_array = np.load(os.path.join(path_dir_npy, f'{fn_item}.npy'))

    seg_array = convert_seg_array(seg_array)
    create_nrrd_from_array(path_nifti=path_nifti, seg_array=seg_array, path_output=path_dir_output)
